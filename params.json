{"note":"Don't delete this file! It's used internally to help with page regeneration.","body":"# core.php #\r\n\r\nManages PDO connection and provides basic debugging functions.\r\n\r\n\r\n## Installation ##\r\n\r\n *  Put core/ into the root of your website.\r\n *  Create a config file for your server by duplicating or renaming **core/db_con/localhost-example.php** to **core/db\\_con/HOSTNAME.php**. E.g. localhost.php or example.com.php\r\n *  Update this file with your database connection details. Core comes with an empty sqlite database so to get going quickly all you need to do is set ROOT_DIR to the location of your web root directory on your server. Note: This is the local URL of your website, e.g. **c:/websites/example/** NOT **http://example.com/**\r\n *  Point your browser towards http://HOSTNAME/core/example.php\r\n *  Scroll down and you will either see \"everything worked!\" or some errors.\r\n *  If you have errors it's not my fault.\r\n\r\n\r\n## Usage ##\r\n\r\nSetting up core in your script:\r\n\r\n    // Prevent direct access.\r\n    define('IN_SCRIPT', true);\r\n\r\n    // Include the class definition\r\n    require_once 'core.php';\r\n\r\n    // Instantiate\r\n    $core = Core::getInstance();\r\n\r\nFor further examples see core/example.php\r\n\r\n\r\n## Computer says no ##\r\n\r\nThis error is designed to not give any information away. If you want more information switch core into debug mode by doing this:\r\n\r\n    $core = Core::getInstance();\r\n    $core->setDebug(true);\r\n    \r\n**Just don't leave debug mode on in production!**\r\n\r\n\r\n## Public Methods ##\r\n\r\n\r\n### getInstance() ###\r\n\r\n\r\nReturns an instance of Core.\r\n\r\n\r\n\r\n### executeSQL(string $sql, array $params = array()) ###\r\n\r\nExecutes an SQL query.\r\n\r\nIf the query is a SELECT query then an associative array will be returned. In all other cases a boolean is returned: true if the query was successful, false if not.\r\n\r\n$params will be passed to [PDO::execute()](http://php.net/manual/en/pdostatement.execute.php) so should be formatted appropriately.\r\n\r\n\r\n\r\n### write($var, string $name='') ###\r\n\r\nFor debugging purposes.\r\n\r\nDumps the contents of a variable between PRE tags. If $name is specified it will be written out first. Sometimes handy if you're using write() a lot.\r\n\r\n\r\n\r\n### writeArrayNicely(array $array, bool $recurse=true) ###\r\n\r\nFor debugging purposes.\r\n\r\nTakes an array and writes it in nested divs with greyscale backgrounds representing the depth within the array. Works with n-dimension arrays. \r\n\r\nSet $recurse to false to prevent it writing out the contents of arrays within the array.\r\n\r\nNote: A hack is included to allow $GLOBALS to be passed to this function - anything with the key 'GLOBALS' will not be written out.\r\n\r\n\r\n\r\n### startTimer() ###\r\n\r\nStarts the timer.\r\n\r\n\r\n\r\n### getTime(string $what = null) ###\r\n\r\nReturns the number of seconds elapsed since startTimer() was called. Returned value is a float to millisecond accuracy.\r\n\r\n\r\n\r\n### logEventTime($event\\_name) ###\r\n\r\nLogs the time taken since startTimer() was called to the log file defined in the config file.\r\n\r\n\r\n\r\n### logEvent(string $message, int $type) ###\r\n\r\nLogs an error to the file specified in db\\_con/HOSTNAME.php. If $type is 5 then emails the error to the email address specified in the above file.\r\n\r\n    $type:\r\n    1 = Information\r\n    2 = Audit\r\n    3 = Security\r\n    4 = Debug\r\n    5 = Error\r\n\r\n\r\n\r\n### mailSend(string $subject, string $mailBody, string $from) ###\r\n\r\nSends an email to the email address specified in db\\_con/HOSTNAME.php.\r\n","name":"Core","tagline":"PDO connection and helper class","google":""}